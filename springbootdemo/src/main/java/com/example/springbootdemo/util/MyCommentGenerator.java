package com.example.springbootdemo.util;

import org.mybatis.generator.api.FullyQualifiedTable;
import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.dom.java.*;
import org.mybatis.generator.api.dom.xml.XmlElement;
import org.mybatis.generator.internal.DefaultCommentGenerator;
import org.mybatis.generator.internal.util.StringUtility;

import java.text.SimpleDateFormat;
import java.util.Properties;
import java.util.Set;

/**
 * 自定义注释生成器
 */
public class MyCommentGenerator extends DefaultCommentGenerator {
    private Properties properties = new Properties();
    private boolean suppressDate = false;
    private boolean suppressAllComments = false;
    private boolean addRemarkComments = false;
    private boolean markAsDoNotDelete = false;
    private SimpleDateFormat dateFormat;

    /**
     * 设置用户配置的参数
     * 从注释生成器配置中配置的任何属性中为此实例添加属性。
     */
    @Override
    public void addConfigurationProperties(Properties properties) {
        super.addConfigurationProperties(properties);
        this.properties.putAll(properties);
        this.suppressDate = StringUtility.isTrue(properties.getProperty("suppressDate"));
        this.suppressAllComments = StringUtility.isTrue(properties.getProperty("suppressAllComments"));
        this.addRemarkComments = StringUtility.isTrue(properties.getProperty("addRemarkComments"));
        String dateFormatString = properties.getProperty("dateFormat");
        if (StringUtility.stringHasValue(dateFormatString)) {
            this.dateFormat = new SimpleDateFormat(dateFormatString);
        }
    }

    public MyCommentGenerator() {
        super();
    }

    /**
     * 添加合适的注释以警告用户元素已生成以及生成时间。
     * @param xmlElement
     */
    @Override
    public void addComment(XmlElement xmlElement) {
        super.addComment(xmlElement);
    }

    @Override
    public void addRootComment(XmlElement rootElement) {
        super.addRootComment(rootElement);
    }

    /**
     * 此方法为其添加自定义 javadoc 标记。
     * @param javaElement
     * @param markAsDoNotDelete
     */
    @Override
    protected void addJavadocTag(JavaElement javaElement, boolean markAsDoNotDelete) {
        super.addJavadocTag(javaElement, markAsDoNotDelete);
    }

    @Override
    protected String getDateString() {
        return super.getDateString();
    }

    /**
     * 添加内部类注释。
     * @param innerClass
     * @param introspectedTable
     */
    @Override
    public void addClassComment(InnerClass innerClass, IntrospectedTable introspectedTable) {
        super.addClassComment(innerClass, introspectedTable);
    }

    /**
     * 添加内部类注释。
     * @param innerClass
     * @param introspectedTable
     * @param markAsDoNotDelete
     */
    @Override
    public void addClassComment(InnerClass innerClass, IntrospectedTable introspectedTable, boolean markAsDoNotDelete) {
        super.addClassComment(innerClass, introspectedTable, markAsDoNotDelete);
    }

    /**
     * 为模型类添加注释。
     * @param topLevelClass
     * @param introspectedTable
     */
    @Override
    public void addModelClassComment(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
        //super.addModelClassComment(topLevelClass, introspectedTable);
        addDataAnnotation(topLevelClass,introspectedTable);
        addSerializableImported(topLevelClass,introspectedTable);
        if (!this.suppressAllComments && this.addRemarkComments) {
            topLevelClass.addJavaDocLine("/**");
            String remarks = introspectedTable.getRemarks();
            if (this.addRemarkComments && StringUtility.stringHasValue(remarks)) {
                //topLevelClass.addJavaDocLine(" * Database Table Remarks:");
                String[] remarkLines = remarks.split(System.getProperty("line.separator"));
                String[] var5 = remarkLines;
                int var6 = remarkLines.length;

                for(int var7 = 0; var7 < var6; ++var7) {
                    String remarkLine = var5[var7];
                    topLevelClass.addJavaDocLine(" *   " + remarkLine);
                }
            }

            //topLevelClass.addJavaDocLine(" *");
            //topLevelClass.addJavaDocLine(" * This class was generated by MyBatis Generator.");
            //StringBuilder sb = new StringBuilder();
            //sb.append(" * This class corresponds to the database table ");
            //sb.append(introspectedTable.getFullyQualifiedTable());
            //topLevelClass.addJavaDocLine(sb.toString());
            addJavadocTag(topLevelClass,markAsDoNotDelete);
            topLevelClass.addJavaDocLine(" */");
        }
    }

    /**
     * 添加枚举注释。
     * @param innerEnum
     * @param introspectedTable
     */
    @Override
    public void addEnumComment(InnerEnum innerEnum, IntrospectedTable introspectedTable) {
        super.addEnumComment(innerEnum, introspectedTable);
    }

    /**
     * 添加字段注释。
     * @param field
     * @param introspectedTable
     */
    @Override
    public void addFieldComment(Field field, IntrospectedTable introspectedTable) {
        super.addFieldComment(field, introspectedTable);
    }

    /**
     * 添加常规方法注释。
     * @param method
     * @param introspectedTable
     */
    @Override
    public void addGeneralMethodComment(Method method, IntrospectedTable introspectedTable) {
        super.addGeneralMethodComment(method, introspectedTable);
    }

    /**
     * 添加 getter 注释。
     * @param method
     * @param introspectedTable
     * @param introspectedColumn
     */
    @Override
    public void addGetterComment(Method method, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn) {
        super.addGetterComment(method, introspectedTable, introspectedColumn);
    }

    /**
     * 添加setter注释。
     * @param method
     * @param introspectedTable
     * @param introspectedColumn
     */
    @Override
    public void addSetterComment(Method method, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn) {
        super.addSetterComment(method, introspectedTable, introspectedColumn);
    }

    /**
     * 向方法中添加@Generated批注。
     * @param method
     * @param introspectedTable
     * @param imports
     */
    @Override
    public void addGeneralMethodAnnotation(Method method, IntrospectedTable introspectedTable, Set<FullyQualifiedJavaType> imports) {
        super.addGeneralMethodAnnotation(method, introspectedTable, imports);
    }

    /**
     * 向方法中添加@Generated批注。
     * @param method
     * @param introspectedTable
     * @param introspectedColumn
     * @param imports
     */
    @Override
    public void addGeneralMethodAnnotation(Method method, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn, Set<FullyQualifiedJavaType> imports) {
        super.addGeneralMethodAnnotation(method, introspectedTable, introspectedColumn, imports);
    }

    /**
     *
     * 向字段添加@Generated批注。
     * @param field
     * @param introspectedTable
     * @param imports
     */
    @Override
    public void addFieldAnnotation(Field field, IntrospectedTable introspectedTable, Set<FullyQualifiedJavaType> imports) {
        super.addFieldAnnotation(field, introspectedTable, imports);
    }

    /**
     *
     * 向字段添加@Generated批注。
     * @param field
     * @param introspectedTable
     * @param introspectedColumn
     * @param imports
     */
    @Override
    public void addFieldAnnotation(Field field, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn, Set<FullyQualifiedJavaType> imports) {
        super.addFieldAnnotation(field, introspectedTable, introspectedColumn, imports);
    }

    /**
     * 将@Generated批注添加到类中。
     * @param innerClass
     * @param introspectedTable
     * @param imports
     */
    @Override
    public void addClassAnnotation(InnerClass innerClass, IntrospectedTable introspectedTable, Set<FullyQualifiedJavaType> imports) {
        super.addClassAnnotation(innerClass, introspectedTable, imports);
    }

    /**
     * 此方法应将 Javadoc 注释添加到指定的字段
     * @param field
     * @param introspectedTable
     * @param introspectedColumn
     */
    @Override
    public void addFieldComment(Field field, IntrospectedTable introspectedTable,
                                IntrospectedColumn introspectedColumn) {
        //super.addFieldComment(field,introspectedTable,introspectedColumn);
        String remarks = introspectedColumn.getRemarks();
        //根据参数和备注信息判断是否添加备注信息
        if (addRemarkComments && StringUtility.stringHasValue(remarks)) {
            addFieldJavaDoc(field, remarks);
        }
    }

    /**
     * 给model的字段添加注释
     */
    private void addFieldJavaDoc(Field field, String remarks) {
        //文档注释开始
        field.addJavaDocLine("/**");
        //获取数据库字段的备注信息
        String[] remarkLines = remarks.split(System.getProperty("line.separator"));
        for (String remarkLine : remarkLines) {
            field.addJavaDocLine(" * " + remarkLine);
        }
        addJavadocTag(field, false);
        field.addJavaDocLine(" */");
    }


    /**
     * 添加实现序列化
     * @param topLevelClass
     * @param introspectedTable
     */
    private void addSerializableImported(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
        //FullyQualifiedTable fullyQualifiedTable = introspectedTable.getFullyQualifiedTable();
        Field field = new Field();
        field.setVisibility(JavaVisibility.PRIVATE);
        field.setType(new FullyQualifiedJavaType("long"));
        field.setStatic(true);
        field.setFinal(true);
        field.setName("serialVersionUID");
        field.setInitializationString("1L");
        FullyQualifiedJavaType fqjt = new FullyQualifiedJavaType("Serializable");
        FullyQualifiedJavaType impi = new FullyQualifiedJavaType("java.io.Serializable");
        topLevelClass.addField(field);
        topLevelClass.addSuperInterface(fqjt);
        topLevelClass.addImportedType(impi);
    }

    /**
     * 添加@Data注解
     * @param topLevelClass
     * @param introspectedTable
     */
    private void addDataAnnotation(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
        topLevelClass.addImportedType("lombok.Data");
        topLevelClass.addAnnotation("@Data");
    }
}


