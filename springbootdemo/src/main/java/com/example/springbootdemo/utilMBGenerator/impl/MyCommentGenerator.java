package com.example.springbootdemo.utilMBGenerator.impl;

import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.dom.java.Field;
import org.mybatis.generator.api.dom.java.JavaElement;
import org.mybatis.generator.api.dom.java.Method;
import org.mybatis.generator.api.dom.java.TopLevelClass;
import org.mybatis.generator.api.dom.xml.TextElement;
import org.mybatis.generator.api.dom.xml.XmlElement;
import org.mybatis.generator.internal.DefaultCommentGenerator;
import org.mybatis.generator.internal.util.StringUtility;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;

/**
 * 自定义注释生成器
 */
public class MyCommentGenerator extends DefaultCommentGenerator {
    private final Properties properties = new Properties();
    private boolean suppressDate = false;
    private boolean suppressAllComments = false;
    private boolean addRemarkComments = false;
    private final boolean markAsDoNotDelete = false;
    private SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy/MM/dd");
    private String author = null;

    public MyCommentGenerator() {
        super();
    }

    /**
     * 设置用户配置的参数
     * 从注释生成器配置中配置的任何属性中为此实例添加属性。
     */
    @Override
    public void addConfigurationProperties(Properties properties) {
        this.properties.putAll(properties);
        this.suppressDate = StringUtility.isTrue(properties.getProperty("suppressDate"));
        this.suppressAllComments = StringUtility.isTrue(properties.getProperty("suppressAllComments"));
        this.addRemarkComments = StringUtility.isTrue(properties.getProperty("addRemarkComments"));
        String dateFormat = properties.getProperty("dateFormat");
        if (StringUtility.stringHasValue(dateFormat)
                && !dateFormat.equals("${dateFormat}")) {
            this.simpleDateFormat = new SimpleDateFormat(dateFormat);
        }

        if (StringUtility.stringHasValue(properties.getProperty("author"))
                && "${author}".equals(properties.getProperty("author"))) {
            this.author = properties.getProperty("author");
        }
    }

    /**
     * 添加合适的注释以警告用户元素已生成以及生成时间。xml文件
     *
     * @param xmlElement
     */
    @Override
    public void addComment(XmlElement xmlElement) {
        //super.addComment(xmlElement);
        if (!this.suppressAllComments) {
            //xmlElement.addElement(new TextElement("<!--"));
            StringBuilder sb = new StringBuilder();
            sb.append("<!--");
            sb.append("  WARNING - ");
            sb.append("@mbg.generated 自动生成的标识，请不要删除");
            sb.append(" -->");
            xmlElement.addElement(new TextElement(sb.toString()));
            //xmlElement.addElement(new TextElement("  This element is automatically generated by MyBatis Generator, do not modify."));
            String s = this.getDateString();
            if (s != null) {
                sb.setLength(0);
                sb.append("  This element was generated on ");
                sb.append(s);
                sb.append('.');
                xmlElement.addElement(new TextElement(sb.toString()));
            }
            //xmlElement.addElement(new TextElement("-->"));
        }
    }

    @Override
    public void addRootComment(XmlElement rootElement) {
        super.addRootComment(rootElement);
    }

    /**
     * 此方法为其添加自定义 javadoc 标记。
     *
     * @param javaElement
     * @param markAsDoNotDelete
     */
    @Override
    protected void addJavadocTag(JavaElement javaElement, boolean markAsDoNotDelete) {
        //super.addJavadocTag(javaElement, markAsDoNotDelete);
        javaElement.addJavaDocLine(" *");
        StringBuilder sb = new StringBuilder();
        sb.append(" * ");
        sb.append("@mbg.generated 自动生成的标识，如修改请删除");
        if (markAsDoNotDelete) {
            sb.append(" do_not_delete_during_merge");
        }

        String s = this.getDateString();
        if (s != null) {
            sb.append(' ');
            sb.append(s);
        }
        javaElement.addJavaDocLine(sb.toString());
    }

    @Override
    protected String getDateString() {
        if (this.suppressDate) {
            return null;
        } else {
            return this.simpleDateFormat != null ? this.simpleDateFormat.format(new Date()) : (new Date()).toString();
        }
    }

    /**
     * 为模型类添加注释。
     *
     * @param topLevelClass
     * @param introspectedTable
     */
    @Override
    public void addModelClassComment(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
        //super.addModelClassComment(topLevelClass, introspectedTable);
        if (!this.suppressAllComments && this.addRemarkComments) {
            topLevelClass.addJavaDocLine("/**");
            String remarks = introspectedTable.getRemarks();
            if (this.addRemarkComments && StringUtility.stringHasValue(remarks)) {
                String[] remarkLines = remarks.split(System.getProperty("line.separator"));
                String[] var5 = remarkLines;
                int var6 = remarkLines.length;

                for (int var7 = 0; var7 < var6; ++var7) {
                    String remarkLine = var5[var7];
                    topLevelClass.addJavaDocLine(" * " + remarkLine);
                }
            }
            this.addJavadocTag(topLevelClass, markAsDoNotDelete);
            if (author != null) {
                topLevelClass.addJavaDocLine(" * @author " + author);
            }
            topLevelClass.addJavaDocLine(" * @date " + simpleDateFormat.format(new Date()));
            topLevelClass.addJavaDocLine(" */");
        }

    }

    /**
     * 添加常规方法注释。
     *
     * @param method
     * @param introspectedTable
     */
    @Override
    public void addGeneralMethodComment(Method method, IntrospectedTable introspectedTable) {
        super.addGeneralMethodComment(method, introspectedTable);
//        if (!this.suppressAllComments) {
//            StringBuilder sb = new StringBuilder();
//            method.addJavaDocLine("/**");
//            if (method.getName().equals("deleteByPrimaryKey")) {
//                sb.append(" * 根据ID删除记录 ");
//                    java.lang.reflect.Field value = null;
//                    try {
//                        value = method.getClass().getDeclaredField("name");
//                        value.setAccessible(true);
//                        //value.set(method, "deleteById");
//                    } catch (Exception e) {
//                        e.printStackTrace();
//                    }
//
//            } else if (method.getName().equals("insert")) {
//                sb.append(" * 添加完整字段记录 ");
//            } else if (method.getName().equals("insertSelective")) {
//                sb.append(" * 添加记录 ");
//            } else if (method.getName().equals("selectByPrimaryKey")) {
//                sb.append(" * 根据ID查询记录 ");
//            } else if (method.getName().equals("updateByPrimaryKeySelective")) {
//                sb.append(" * 根据ID修改记录 ");
//            } else if (method.getName().equals("updateByPrimaryKey")) {
//                sb.append(" * 根据ID修改完整字段记录 ");
//            }
//            //method.addJavaDocLine(" * This method was generated by MyBatis Generator.");
//            //sb.append(" * This method corresponds to the database table ");
//            //sb.append(introspectedTable.getFullyQualifiedTable());
//            method.addJavaDocLine(sb.toString());
//            this.addJavadocTag(method, false);
//            method.addJavaDocLine(" */");
//        }
    }

    /**
     * 此方法应将 Javadoc 注释添加到指定的字段
     *
     * @param field
     * @param introspectedTable
     * @param introspectedColumn
     */
    @Override
    public void addFieldComment(Field field, IntrospectedTable introspectedTable,
                                IntrospectedColumn introspectedColumn) {
        //super.addFieldComment(field,introspectedTable,introspectedColumn);
        field.addJavaDocLine("/**");
        String remarks = introspectedColumn.getRemarks();
        if (this.addRemarkComments && StringUtility.stringHasValue(remarks)) {
            String[] remarkLines = remarks.split(System.getProperty("line.separator"));
            String[] var6 = remarkLines;
            int var7 = remarkLines.length;

            for (int var8 = 0; var8 < var7; ++var8) {
                String remarkLine = var6[var8];
                field.addJavaDocLine(" * " + remarkLine);
            }
        }
        this.addJavadocTag(field, markAsDoNotDelete);
        field.addJavaDocLine(" */");
        // field.addAnnotation("");
        //判断是否可以为null，不可以为null则添加校验注解
        if (!introspectedColumn.isNullable()) {
            if (field.getType().getShortName().equals("String")) {
                field.addAnnotation("@NotBlank");
            } else {
                if (!field.getName().equals("id")) {
                    field.addAnnotation("@NotNull");
                }
            }
        }
        if (field.getType().getShortName().equals("String")) {
            StringBuilder sb = new StringBuilder();
            sb.append("@Length(max = ");
            sb.append(introspectedColumn.getLength());
            sb.append(", message = \"");
            sb.append(introspectedColumn.getRemarks().trim().split(" ")[0]);
            sb.append("长度不能大于");
            sb.append(introspectedColumn.getLength());
            sb.append("\")");
            field.addAnnotation(sb.toString());
        }

    }

}


